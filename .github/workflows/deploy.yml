name: Deploy to EC2

on:
  push:
    branches:
      - main        # For prod
      - dev         # For dev
      - stage       # For stage

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Write private key to file
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private-key.pem
        chmod 600 private-key.pem  # Ensure the private key has the correct permissions

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Define EC2 instance based on branch
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
          export EC2_INSTANCE="prod-ec2-ip-address"   # Replace with your prod EC2 IP
          export APP_ENV="prod"
        elif [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
          export EC2_INSTANCE="dev-ec2-ip-address"    # Replace with your dev EC2 IP
          export APP_ENV="dev"
        elif [[ "${GITHUB_REF}" == "refs/heads/stage" ]]; then
          export EC2_INSTANCE="stage-ec2-ip-address"  # Replace with your stage EC2 IP
          export APP_ENV="stage"
        fi

    - name: Create target directory on EC2 (if not exists)
      run: |
        set -e  # Fail the job if any command fails
        ssh -i private-key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=60 ubuntu@$EC2_INSTANCE "mkdir -p /home/ubuntu/app"

    - name: Copy files to EC2 instance
      run: |
        set -e  # Fail the job if any command fails
        scp -i private-key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ./your-app-directory/* ubuntu@$EC2_INSTANCE:/home/ubuntu/app

    - name: SSH into EC2 instance and restart the app
      run: |
        set -e  # Fail the job if any command fails
        ssh -i private-key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 ubuntu@$EC2_INSTANCE << 'EOF'
          echo "Stopping the Docker container on $APP_ENV environment..."
          cd /home/ubuntu/app
          docker-compose down
          echo "Starting the Docker container on $APP_ENV environment..."
          docker-compose up -d
        EOF
